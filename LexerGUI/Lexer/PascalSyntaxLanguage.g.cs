namespace PascalCompiler.Lexical.Lexer {
    using ActiproSoftware.Text;
    using ActiproSoftware.Text.Implementation;
    using ActiproSoftware.Text.Lexing;
    
    
    /// <summary>
    /// Represents a <c>Pascal</c> syntax language definition.
    /// </summary>
    /// <remarks>
    /// This type was generated by the Actipro Language Designer tool v19.1.685.0 (http://www.actiprosoftware.com).
    /// Generated code is based on input created by Actipro Software LLC.
    /// Copyright (c) 2001-2020 Actipro Software LLC.  All rights reserved.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("LanguageDesigner", "19.1.685.0")]
    public partial class PascalSyntaxLanguage : SyntaxLanguage {
        
        /// <summary>
        /// Initializes a new instance of the <c>PascalSyntaxLanguage</c> class.
        /// </summary>
        public PascalSyntaxLanguage() : 
                base("Pascal") {

            // Create a classification type provider and register its classification types
            PascalClassificationTypeProvider classificationTypeProvider = new PascalClassificationTypeProvider();
            classificationTypeProvider.RegisterAll();

            // Register an ILexer service that can tokenize text
            this.RegisterService<ILexer>(new PascalLexer(classificationTypeProvider));

            // Register an ICodeDocumentTaggerProvider service that creates a token tagger for
            //   each document using the language
            this.RegisterService(new PascalTokenTaggerProvider(classificationTypeProvider));

            // Register an IExampleTextProvider service that provides example text
            this.RegisterService<IExampleTextProvider>(new PascalExampleTextProvider());
        }
    }
}
