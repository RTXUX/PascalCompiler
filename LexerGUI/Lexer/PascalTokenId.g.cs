namespace PascalCompiler.Lexical.Lexer {
    using ActiproSoftware.Text.Lexing.Implementation;
    using System;
    using System.ComponentModel;
    using System.Linq;
    using System.Reflection;
    
    
    /// <summary>
    /// Contains the token IDs for the <c>Pascal</c> language.
    /// </summary>
    /// <remarks>
    /// This type was generated by the Actipro Language Designer tool v19.1.685.0 (http://www.actiprosoftware.com).
    /// Generated code is based on input created by Actipro Software LLC.
    /// Copyright (c) 2001-2020 Actipro Software LLC.  All rights reserved.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("LanguageDesigner", "19.1.685.0")]
    public partial class PascalTokenId : TokenIdProviderBase {
        
        /// <summary>
        /// Gets the <c>Whitespace</c> token ID.
        /// </summary>
        public const Int32 Whitespace = 1;
        
        /// <summary>
        /// Gets the <c>LineTerminator</c> token ID.
        /// </summary>
        public const Int32 LineTerminator = 2;
        
        /// <summary>
        /// Gets the <c>OpenParenthesis</c> token ID.
        /// </summary>
        public const Int32 OpenParenthesis = 3;
        
        /// <summary>
        /// Gets the <c>CloseParenthesis</c> token ID.
        /// </summary>
        public const Int32 CloseParenthesis = 4;
        
        /// <summary>
        /// Gets the <c>OpenSquareBrace</c> token ID.
        /// </summary>
        public const Int32 OpenSquareBrace = 5;
        
        /// <summary>
        /// Gets the <c>CloseSquareBrace</c> token ID.
        /// </summary>
        public const Int32 CloseSquareBrace = 6;
        
        /// <summary>
        /// Gets the <c>Punctuation</c> token ID.
        /// </summary>
        public const Int32 Punctuation = 7;
        
        /// <summary>
        /// Gets the <c>Keyword</c> token ID.
        /// </summary>
        public const Int32 Keyword = 8;
        
        /// <summary>
        /// Gets the <c>Identifier</c> token ID.
        /// </summary>
        public const Int32 Identifier = 9;
        
        /// <summary>
        /// Gets the <c>Operator</c> token ID.
        /// </summary>
        public const Int32 Operator = 10;
        
        /// <summary>
        /// Gets the <c>RealNumber</c> token ID.
        /// </summary>
        public const Int32 RealNumber = 11;
        
        /// <summary>
        /// Gets the <c>IntegerNumber</c> token ID.
        /// </summary>
        public const Int32 IntegerNumber = 12;
        
        /// <summary>
        /// Gets the <c>PrimaryStringText</c> token ID.
        /// </summary>
        public const Int32 PrimaryStringText = 13;
        
        /// <summary>
        /// Gets the <c>PrimaryStringStartDelimiter</c> token ID.
        /// </summary>
        public const Int32 PrimaryStringStartDelimiter = 14;
        
        /// <summary>
        /// Gets the <c>PrimaryStringEndDelimiter</c> token ID.
        /// </summary>
        public const Int32 PrimaryStringEndDelimiter = 15;
        
        /// <summary>
        /// Gets the <c>PrimaryStringEscapedDelimiter</c> token ID.
        /// </summary>
        public const Int32 PrimaryStringEscapedDelimiter = 16;
        
        /// <summary>
        /// Gets the <c>MultiLineCommentText</c> token ID.
        /// </summary>
        public const Int32 MultiLineCommentText = 17;
        
        /// <summary>
        /// Gets the <c>MultiLineCommentStartDelimiter</c> token ID.
        /// </summary>
        public const Int32 MultiLineCommentStartDelimiter = 18;
        
        /// <summary>
        /// Gets the <c>MultiLineCommentEndDelimiter</c> token ID.
        /// </summary>
        public const Int32 MultiLineCommentEndDelimiter = 19;
        
        /// <summary>
        /// Gets the <c>MultiLineCommentLineTerminator</c> token ID.
        /// </summary>
        public const Int32 MultiLineCommentLineTerminator = 20;
        
        /// <summary>
        /// Gets the minimum token ID returned by this provider.
        /// </summary>
        /// <value>The minimum token ID returned by this provider.</value>
        public override Int32 MinId {
            get {
                return 1;
            }
        }
        
        /// <summary>
        /// Gets the maximum token ID returned by this provider.
        /// </summary>
        /// <value>The maximum token ID returned by this provider.</value>
        public override Int32 MaxId {
            get {
                return 20;
            }
        }
        
        /// <summary>
        /// Returns whether the specified ID value is valid for this token ID provider.
        /// </summary>
        /// <param name="id">The token ID to examine.</param>
        /// <returns><c>true</c> if the ID value is valid; otherwise, <c>false</c></returns>
        public override Boolean ContainsId(Int32 id) {
            return ((id >= MinId) 
                        && (id <= MaxId));
        }
        
        /// <summary>
        /// Returns the public static fields in this ID provider.
        /// </summary>
        /// <returns>The public static fields in this ID provider.</returns>
        private static FieldInfo[] GetFields() {
			#if WINRT
			return typeof(PascalTokenId).GetTypeInfo().DeclaredFields.Where(f => (f.IsPublic) && (f.IsStatic)).ToArray();
			#else
			return typeof(PascalTokenId).GetFields((BindingFlags.Public | BindingFlags.Static));
			#endif
        }
        
        /// <summary>
        /// Returns the actual string representation for the specified token ID.
        /// </summary>
        /// <param name="id">The token ID to examine.</param>
        /// <returns>The actual string representation for the specified token ID.</returns>
        public override String GetDescription(Int32 id) {
            FieldInfo[] fields = GetFields();
            for (Int32 index = 0; (index < fields.Length); index = (index + 1)) {
                FieldInfo field = fields[index];
                if (id.Equals(field.GetValue(null))) {
                    Object descriptionAttr = field.GetCustomAttributes(typeof(DescriptionAttribute), false).FirstOrDefault();
                    if ((descriptionAttr != null)) {
                        return ((DescriptionAttribute)(descriptionAttr)).Description;
                    }
                    else {
                        return field.Name;
                    }
                }
            }
            return null;
        }
        
        /// <summary>
        /// Returns the string-based key for the specified token ID.
        /// </summary>
        /// <param name="id">The token ID to examine.</param>
        /// <returns>The string-based key for the specified token ID.</returns>
        public override String GetKey(Int32 id) {
            FieldInfo[] fields = GetFields();
            for (Int32 index = 0; (index < fields.Length); index = (index + 1)) {
                FieldInfo field = fields[index];
                if (id.Equals(field.GetValue(null))) {
                    return field.Name;
                }
            }
            return null;
        }
        
        /// <summary>
        /// Returns whether the specified ID value is part of the <c>Comment</c>.
        /// </summary>
        /// <param name="id">The token ID to examine.</param>
        /// <returns><c>true</c> if the ID value is in the classification type; otherwise, <c>false</c></returns>
        public static Boolean IsCommentClassificationType(Int32 id) {
            return (id == MultiLineCommentText);
        }
        
        /// <summary>
        /// Returns whether the specified ID value is part of the <c>Identifier</c>.
        /// </summary>
        /// <param name="id">The token ID to examine.</param>
        /// <returns><c>true</c> if the ID value is in the classification type; otherwise, <c>false</c></returns>
        public static Boolean IsIdentifierClassificationType(Int32 id) {
            return (id == Identifier);
        }
        
        /// <summary>
        /// Returns whether the specified ID value is part of the <c>Keyword</c>.
        /// </summary>
        /// <param name="id">The token ID to examine.</param>
        /// <returns><c>true</c> if the ID value is in the classification type; otherwise, <c>false</c></returns>
        public static Boolean IsKeywordClassificationType(Int32 id) {
            return (id == Keyword);
        }
        
        /// <summary>
        /// Returns whether the specified ID value is part of the <c>Number</c>.
        /// </summary>
        /// <param name="id">The token ID to examine.</param>
        /// <returns><c>true</c> if the ID value is in the classification type; otherwise, <c>false</c></returns>
        public static Boolean IsNumberClassificationType(Int32 id) {
            return ((id >= RealNumber) 
                        && (id <= IntegerNumber));
        }
        
        /// <summary>
        /// Returns whether the specified ID value is part of the <c>Operator</c>.
        /// </summary>
        /// <param name="id">The token ID to examine.</param>
        /// <returns><c>true</c> if the ID value is in the classification type; otherwise, <c>false</c></returns>
        public static Boolean IsOperatorClassificationType(Int32 id) {
            return (id == Operator);
        }
        
        /// <summary>
        /// Returns whether the specified ID value is part of the <c>String</c>.
        /// </summary>
        /// <param name="id">The token ID to examine.</param>
        /// <returns><c>true</c> if the ID value is in the classification type; otherwise, <c>false</c></returns>
        public static Boolean IsStringClassificationType(Int32 id) {
            return (id == PrimaryStringText);
        }
    }
}
